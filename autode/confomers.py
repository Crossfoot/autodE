from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import rdMolAlign
from .config import Config
from .log import logger
from .input_output import xyzs2xyzfile
from .XTBio import run_xtb
from .XTBio import get_xtb_xyzs_energy
from .opt import get_opt_xyzs_energy


def gen_conformer_xyzs(mol, conf_ids):
    """
    Generate xyz lists for all the conformers in mol.conf_ids
    :param mol: Molecule object
    :param conf_ids: (list) list of conformer ids to convert to xyz
    :return: (list) of xyz lists
    """
    xyzs = []

    for i in range(len(conf_ids)):
        mol_block_lines = Chem.MolToMolBlock(mol.mol_obj, confId=conf_ids[i]).split('\n')
        mol_file_xyzs = []

        for line in mol_block_lines:
            split_line = line.split()
            if len(split_line) == 16:
                atom_label, x, y, z = split_line[3], split_line[0], split_line[1], split_line[2]
                mol_file_xyzs.append([atom_label, float(x), float(y), float(z)])

        xyzs.append(mol_file_xyzs)

    if len(xyzs) == 0:
        logger.critical('Length of conformer xyz list was 0')
        exit()

    return xyzs


def generate_unique_confs(mol_obj, n_rdkit_confs):
    """
    Prue the n_rdkit_confs conformers that are generated by the ETKDG algorithm to include only those with RMSD
    larger than 0.5 Ã…

    :param mol_obj: rdkit mol object
    :param n_rdkit_confs: (int) number of rdkit conformers to generate
    :return:
    """
    conf_ids = list(AllChem.EmbedMultipleConfs(mol_obj, numConfs=n_rdkit_confs, params=AllChem.ETKDG()))
    unique_conf_ids = [0]

    for i in range(1, len(conf_ids)):
        is_unique = True

        for j in range(len(unique_conf_ids)):
            rmsd = rdMolAlign.AlignMol(mol_obj, mol_obj, prbCid=j, refCid=i)
            if rmsd < 0.5:
                is_unique = False
                break

        if is_unique:
            unique_conf_ids.append(i)

    if len(unique_conf_ids) == 1:
        logger.warning('Only have a single conformer')

    return unique_conf_ids


class Conformer(object):

    def xtb_optimise(self):
        xyz_filename = self.name + '.xyz'
        if self.xyzs is not None:
            xyzs2xyzfile(self.xyzs, filename=xyz_filename)
            xtb_out_lines = run_xtb(xyz_filename, opt=True, charge=self.charge, solvent=self.solvent)
            self.xyzs, self.energy = get_xtb_xyzs_energy(xtb_out_lines)
        else:
            logger.error('Could not optimise conformer, have no xyzs')

    def orca_optimise(self):
        self.xyzs, self.energy = get_opt_xyzs_energy(self, keywords=Config.conf_opt_keywords, n_cores=Config.n_cores)

    def __init__(self, name='conf', xyzs=None, energy=None, solvent=None, charge=0, mult=1):
        self.name = name
        self.xyzs = xyzs
        self.n_atoms = len(xyzs) if xyzs is not None else None
        self.energy = energy
        self.solvent = solvent
        self.charge = charge
        self.mult = mult
